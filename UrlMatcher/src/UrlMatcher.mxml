<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/halo" width="800" height="350" backgroundColor="#333333" viewSourceURL="srcview/index.html">
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/halo";
		@font-face {
			src:url("/Users/cristobaldabed/Library/Fonts/DejaVuSans.ttf");
			fontFamily: DejaVu;
			advancedAntiAliasing: true;
		}
		
		@font-face {
			src:url("/Users/cristobaldabed/Library/Fonts/DejaVuSansMono-Bold.ttf");
			fontFamily: DejaVu;
			fontWeight: bold;
			advancedAntiAliasing: true;
		}
		
		.uriText, .uriErrorText {
			font-family: DejaVu;
			font-weight: bold;
			color: #5573A0;
			font-size: 15;
		}
		
		.uriErrorText { color: #ff0000; border-color: #ff0000; }
		
		.inputResult, .inputResultError, .inputResultWarn {
			font-family: DejaVu;
			font-weight: bold;
			font-size: 13; 
			color: #333333;
		}
		
		.inputResultError {
			color: #ff0000;
		}
		
		.inputResultWarn {
			border-color: #EE9A00;
		}
		
		.messageWarn, .messageError {
			font-family: DejaVu;
			font-weight: bold;
			font-size: 13; 
			padding: 2 2 1 2;
			color: #EE9A00;
		}
		
		.messageError { color: #ff0000; }
		.defaultBorder { borderColor: #333333;}
		.errorBorder { borderColor: #ff0000;}
		
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import flash.display.NativeWindowInitOptions;
			import flash.events.MouseEvent;
			
			import mx.events.FlexEvent;
			
			private static var urlRe:RegExp = /^(([a-zA-Z0-9]+):\/\/|)(([a-zA-Z0-9]+):([a-zA-Z0-9]+)@|)(([a-zA-Z0-9]+)\.|)([a-zA-Z0-9]+\.)([a-zA-Z0-9]+)(:\d+|)(\/.+|\/|)$/;
			
			// http://en.wikipedia.org/wiki/Application_Layer
			// http://data.iana.org/TLD/tlds-alpha-by-domain.txt
			private static var protocols:Array = ["afp","feed","ftp","http","https","mysql", "imap", "rtps", "rss", "smb", "smtp"];
			private static var tlds:Array = ["ac","ad","ae","aero","af","ag","ai","al","am","an","ao","aq","ar","arpa","as","asia","at","au","aw","ax","az","ba","bb","bd","be","bf","bg","bh","bi","biz","bj","bm","bn","bo","br","bs","bt","bv","bw","by","bz","ca","cat","cc","cd","cf","cg","ch","ci","ck","cl","cm","cn","co","com","coop","cr","cu","cv","cx","cy","cz","de","dj","dk","dm","do","dz","ec","edu","ee","eg","er","es","et","eu","fi","fj","fk","fm","fo","fr","ga","gb","gd","ge","gf","gg","gh","gi","gl","gm","gn","gov","gp","gq","gr","gs","gt","gu","gw","gy","hk","hm","hn","hr","ht","hu","id","ie","il","im","in","info","int","io","iq","ir","is","it","je","jm","jo","jobs","jp","ke","kg","kh","ki","km","kn","kp","kr","kw","ky","kz","la","lb","lc","li","lk","lr","ls","lt","lu","lv","ly","ma","mc","md","me","mg","mh","mil","mk","ml","mm","mn","mo","mobi","mp","mq","mr","ms","mt","mu","museum","mv","mw","mx","my","mz","na","name","nc","ne","net","nf","ng","ni","nl","no","np","nr","nu","nz","om","org","pa","pe","pf","pg","ph","pk","pl","pm","pn","pr","pro","ps","pt","pw","py","qa","re","ro","rs","ru","rw","sa","sb","sc","sd","se","sg","sh","si","sj","sk","sl","sm","sn","so","sr","st","su","sv","sy","sz","tc","td","tel","tf","tg","th","tj","tk","tl","tm","tn","to","tp","tr","travel","tt","tv","tw","tz","ua","ug","uk","us","uy","uz","va","vc","ve","vg","vi","vn","vu","wf","ws","xn--0zwm56d","xn--11b5bs3a9aj6g","xn--80akhbyknj4f","xn--9t4b11yi5a","xn--deba0ad","xn--g6w251d","xn--hgbk6aj7f53bba","xn--hlcj6aya9esc7a","xn--jxalpdlp","xn--kgbechtv","xn--zckzah","ye","yt","yu","za","zm","zw"];
			
			// private static var protocolRe:RegExp = /^([a-zA-Z0-9]+):\/\//; //
			// private static var authRe:RegExp =  /^([a-zA-Z0-9]+):([a-zA-Z0-9]+)@/; //
			// private static var domainRE:RegExp = /^(([a-zA-Z0-9]+)\.|)([a-zA-Z0-9]+\.)([a-zA-Z0-9]+)(:\d+|\/.+|$)/; */

			
			private function handleClickEvent(event:MouseEvent):void {
				if(uriTextInput.styleName == "uriErrorText"){
					uriTextInput.styleName = "uriText";
				}
			}
			
			private function handleExecEvent(event:MouseEvent):void {
				
				// 1. Get Uri

				var uri:String = uriTextInput.text;
				if(urlRe.test(uri)){
					var matches:Array = urlRe.exec( uri );
					
					validateProtocol( matches[1], matches[2] );  		// 1 = (proto://), 2 = (proto)
					
					validateAuth( matches[3], matches[4], matches[5]); 	// 3 =  user:pass@, 4, 5 contains user:pass
					
					validateSub( matches[6], matches[7] ); 				// 6 = (sub.), 7 = (sub)
					
					validateDomain( matches[8], matches[9]);			// 8 = domainname\., 9 = tld
					
					validatePort( matches[10] );						// 10 = :port
					
					validateRest( matches[11] );						// 11 = \/ or \/.+ or nada
				} else {
					// reset protovalue 
					protocolValue.text = "";
					protocolValue.styleName = "inputResult";
					protocolValueBorder.styleName = "defaultBorder";
					protocolMessage.text = "";
					protocolMessage.styleName = "messageWarn";
					// reset other values
					authValue.text = "";
					domainValue.text = "";
					subValue.text = "";
					tldValue.text = "";
					tldMessage.text = "";
					portValue.text = "";
					restValue.text = "";
					
					uriTextInput.styleName = "uriErrorText";
				}
			}
			
			/**
			 * Protocol is optional.
			 */ 
			private function validateProtocol(protocolMatch:String="", protocol:String=null):void {
				
				if(protocol != null){
					protocolValue.text = protocol;
					protocolValue.styleName = "inputResult";
					protocolValueBorder.styleName = "defaultBorder";
					protocolMessage.text = "";
					protocolMessage.styleName = "messageWarn";
					
					if(!protocolExists(protocol)){
						if(protocol.length < 2){
							protocolValue.styleName = "inputResultError";
							protocolMessage.styleName = "messageError";
							protocolValueBorder.styleName = "errorBorder";
							protocolMessage.text = "1 char protocol come on...";
						}else if(protocol.length < 3 || protocol.length > 4){
							protocolValue.styleName = "inputResultWarn";
							protocolMessage.styleName = "messageWarn";
							protocolMessage.text = "Dubious, most protocols have 3-4chars.";
						} else {
							protocolValue.styleName = "inputResultWarn";
							protocolMessage.styleName = "messageWarn";
							protocolMessage.text = "Perhaps i should update my protocol list? txt me.";
						}
					}
				} else {
					protocolValue.text = "None given";
					protocolValue.styleName = "inputResultWarn";
					protocolMessage.styleName = "messageWarn";
					protocolMessage.text = "We assume http.";
				}
			}
			
			/**
			 * Test if the protocol is in the valid protocol list.
			 */ 
			private function protocolExists(protocol:String, found:Boolean=false):Boolean{
				for each(var protocolValue:String in protocols){
					if(protocol == protocolValue){
						found = true;
						break;
					}
				}
				return found;
			}
		
			
			/**
			 * Authentication is optional.
			 */ 
			private function validateAuth(authMatch:String="", user:String=null, pass:String=null):void {
				if(authMatch != "" ){
					authValue.text = authMatch.replace("@", "");
				} else {
					authValue.text = "None given";
				}
			}
			
			
			/**
			 * Subdomain is optional
			 */ 
			private function validateSub(subMatch:String="", sub:String=null):void {
				// 
				if(subMatch != ""){
					subValue.text = sub.toLowerCase();
				} else {
					subValue.text = "None given";
				}
			}
			
			/**
			 *  Domain Name is required and, tld must match one in the IANA list.
			 */ 
			private function validateDomain(domainName:String="", tld:String=""):void {
				domainName = domainName.toLowerCase();
				domainValue.text = domainName;
				tld = tld.toLowerCase();
				tldValue.text = tld;
				tldMessage.text = "";
				uriTextInput.styleName = "uriText";
				if(!tldExists(tld)){
					tldMessage.text = "Not an valid domain go to: http://bit.ly/SGbyo";
					uriTextInput.styleName = "uriErrorText";
				}
			}
			
			/**
			 * Test if the tld is in the valid tld list.
			 */ 
			private function tldExists(tld:String, found:Boolean=false):Boolean{
				for each(var tldValue:String in tlds){
					if(tld == tldValue){
						found = true;
						break;
					}
				}
				return found;
			}
			
			/**
			 * Port Number is optional.
			 */
			private function validatePort(port:String = ""):void {
				if(port != ""){
					portValue.text = port.replace(':', '');
				} else {
					portValue.text = "None given";
				}
			}
			
			/**
			 * Rest of url.
			 */
			private function validateRest(rest:String = ""):void {
				restValue.text = rest.replace('/', '');
			}
			
			// TODO: Create regexp patterns for user so they can use outside of this app.

		]]>
	</fx:Script>
	<s:TextInput id="uriTextInput" styleName="uriText" x="20" y="19" width="636" height="30" focusColor="#70B2EE" fontWeight="bold" click="handleClickEvent(event)"/>
	<s:Button x="664" y="19" label="Exec" width="126" height="30" click="handleExecEvent(event)"/>
	
	<!-- Protocol Field -->
	<s:Label x="35" y="65" text="PROTOCOL:" color="#FFFFFF" fontFamily="DejaVu" fontWeight="bold" fontSize="16" width="106" height="16"/>
	<s:Border id="protocolValueBorder" x="153" y="61" height="20" width="108" styleName="defaultBorder" backgroundColor="#FFFFFF">
		<s:Label x="3" y="3" width="102" height="13" styleName="inputResult" id="protocolValue"/>	
	</s:Border>
	<s:Label x="271" y="67" width="385" height="16" styleName="messageWarn" id="protocolMessage"/>
	
	
	<!-- Auth Field -->
	<s:Label x="34" y="97" text="AUTH:" color="#FFFFFF" fontFamily="DejaVu" fontWeight="bold" fontSize="16" width="106" height="16"/>
	<s:Border x="152" y="93" height="20" width="208" styleName="defaultBorder" backgroundColor="#FFFFFF">
		<s:Label x="3" y="3" width="204" height="13" styleName="inputResult" id="authValue"/>	
	</s:Border>
	
	<!--  Sub Domain -->
	<s:Label x="35" y="129" text="SUB:" color="#FFFFFF" fontFamily="DejaVu" fontWeight="bold" fontSize="16" width="106" height="16"/>
	<s:Border x="153" y="125" height="20" width="108" styleName="defaultBorder" backgroundColor="#FFFFFF">
		<s:Label x="3" y="3" width="102" height="13" styleName="inputResult" id="subValue"/>	
	</s:Border>
	
	<!--  DOMAIN -->
	<s:Label x="35" y="161" text="DOMAIN:" color="#FFFFFF" fontFamily="DejaVu" fontWeight="bold" fontSize="16" width="106" height="16"/>
	<s:Border x="153" y="157" height="20" width="207" styleName="defaultBorder" backgroundColor="#FFFFFF">
		<s:Label x="3" y="3" width="204" height="13" styleName="inputResult" id="domainValue"/>	
	</s:Border>
	
	<!--  TLD -->
	<s:Label x="34" y="195" text="TLD:" color="#FFFFFF" fontFamily="DejaVu" fontWeight="bold" fontSize="16" width="106" height="16"/>
	<s:Border x="152" y="191" height="20" width="108" styleName="defaultBorder" backgroundColor="#FFFFFF">
		<s:Label x="3" y="3" width="102" height="13" styleName="inputResult" id="tldValue"/>	
	</s:Border>
	<s:Label x="271" y="195" width="385" height="16" styleName="messageError" id="tldMessage"/>
	
	<!-- PORT Number -->
	<s:Label x="34" y="229" text="PORT:" color="#FFFFFF" fontFamily="DejaVu" fontWeight="bold" fontSize="16" width="106" height="16"/>
	<s:Border x="152" y="225" height="20" width="108" styleName="defaultBorder" backgroundColor="#FFFFFF">
		<s:Label x="3" y="3" width="102" height="13" styleName="inputResult" id="portValue"/>	
	</s:Border>
	
	<!-- Rest -->
	<s:Label x="34" y="262" text="REST:" color="#FFFFFF" fontFamily="DejaVu" fontWeight="bold" fontSize="16" width="106" height="16"/>
	<s:Border x="152" y="258" height="20" width="504" styleName="defaultBorder" backgroundColor="#FFFFFF">
		<s:Label x="3" y="3" width="498" height="13" styleName="inputResult" id="restValue"/>	
	</s:Border>
	<s:Label x="640" y="310" text="Made for RIA @ CREUNA" width="150" height="18" fontFamily="DejaVu" color="#FFFFFF"/>

	
</s:WindowedApplication>